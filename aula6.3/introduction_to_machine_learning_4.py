# -*- coding: utf-8 -*-
"""Introduction to Machine Learning - 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VWeTmWAA-XHwh8waHJQC5r9yzantJdwr
"""

!pip install graphviz==0.9
!pip install pydot
!apt-get install graphviz

import pandas as pd

uri = "https://gist.githubusercontent.com/guilhermesilveira/4d1d4a16ccbf6ea4e0a64a38a24ec884/raw/afd05cb0c796d18f3f5a6537053ded308ba94bf7/car-prices.csv"
data = pd.read_csv(uri)
data.head()

swap = { 'yes': 1, 'no': 0}
data.sold = data.sold.map(swap)
data.head()

from datetime import datetime

current_year = datetime.today().year
data['years'] = current_year - data.model_year
data.head()

data.mileage_per_year.hist()

data.years.hist()

data.price.hist()

data.sold.hist()

"""# A first attempt to classify"""

x = data[["mileage_per_year", "price", "years"]]
y = data["sold"]

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import numpy as np

SEED = 5
np.random.seed(SEED)

raw_train_x, raw_test_x, train_y, test_y = train_test_split(x, y, test_size=0.25,
                                                        stratify=y)
print("Train set lenght %d and test set lenght %d" % (len(raw_train_x), len(raw_test_x)))

scaler = StandardScaler()
scaler.fit(raw_train_x)
train_x = scaler.transform(raw_train_x)
test_x = scaler.transform(raw_test_x)

model = SVC()
model.fit(train_x, train_y)
predictions = model.predict(test_x)

accuracy = accuracy_score(test_y, predictions) * 100
print("Accuracy %.2f%%"% accuracy)

from sklearn.tree import DecisionTreeClassifier

SEED = 50
np.random.seed(SEED)

model = DecisionTreeClassifier(max_depth = 2)
model.fit(raw_train_x, train_y)
predictions = model.predict(raw_test_x)

accuracy = accuracy_score(test_y, predictions) * 100
print("Accuracy %.2f%%"% accuracy)

from sklearn.tree import export_graphviz
import graphviz

features = x.columns
dot_data = export_graphviz(model, out_file=None,
                           filled = True, rounded = True,
                            feature_names = features, class_names=["no","yes"])
graph = graphviz.Source(dot_data)
graph

"""# Let's try to optimize our model (our hyper parameters)"""

SEED = 50

def run_tree_for(min_samples_split, min_samples_leaf, max_depth):
  np.random.seed(SEED)

  model = DecisionTreeClassifier(min_samples_split = min_samples_split,
                                 min_samples_leaf = min_samples_leaf,
                                max_depth = max_depth)
  model.fit(raw_train_x, train_y)
  predictions = model.predict(raw_test_x)

  accuracy = accuracy_score(test_y, predictions) * 100
  print("Accuracy %.2f%%"% accuracy)

run_tree_for(2, 1, None)

# a basic grid search

# for max_depth in range(3, 31):
#   for min_samples_leaf in range(2, 51):
#     for min_samples_split in range(2, 51):
#       run_tree_for(min_samples_split = min_samples_split,
#                   min_samples_leaf = min_samples_leaf,
#                   max_depth = None)

from scipy.stats import randint

np.random.seed(SEED)
param_space = {
    "max_depth": [3, 5, 10, 15, 20, 30, None],
    "min_samples_split" : randint(2, 150),
    "min_samples_leaf" : randint(2, 150),
    "criterion" : ["gini", "entropy"]
}

raw_train_x, validation_x, raw_train_y, validation_y = train_test_split(x, y, test_size=0.25, random_state=SEED, stratify=y)

from sklearn.model_selection import RandomizedSearchCV

search = RandomizedSearchCV(DecisionTreeClassifier(),
                   param_space,
                   n_iter=100,
                   cv = 5,
                   random_state = SEED)
search.fit(raw_train_x, raw_train_y)
results = pd.DataFrame(search.cv_results_)
results.head()

print(len(results))

print(search.best_params_)
print(search.best_score_)

best = search.best_estimator_
best

predictions = best.predict(validation_x)
accuracy = accuracy_score(predictions, validation_y)
print("Accuracy for the validation set was %.2f%%" % (accuracy * 100))

from sklearn.tree import export_graphviz
import graphviz

features = x.columns
dot_data = export_graphviz(best, out_file=None,
                           filled = True, rounded = True,
                            feature_names = features, class_names=["no","yes"])
graph = graphviz.Source(dot_data)
graph

