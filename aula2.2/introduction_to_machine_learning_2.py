# -*- coding: utf-8 -*-
"""Introduction to Machine Learning - 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x6JYCPo0sLkbYg_wB_S7kibiLZTweYQD
"""

import pandas as pd

uri = "https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv"

data = pd.read_csv(uri)
data.head()

data.shape

x = data[["home", "how_it_works", "contact"]]
x.head()

y = data["bought"]
y.head()

x.shape

train_x = x[:75]
train_y = y[:75]
test_x = x[75:]
test_y = y[75:]

print("Train set lenght %d and test set lenght %d" % (len(train_x), len(test_x)))

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

model = LinearSVC()
model.fit(train_x, train_y)
predictions = model.predict(test_x)

accuracy = accuracy_score(test_y, predictions) * 100
print("Accuracy %.2f%%"% accuracy)

"""# Using the library for splitting data"""

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 20

train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.25, random_state=SEED)
print("Train set lenght %d and test set lenght %d" % (len(train_x), len(test_x)))

model = LinearSVC()
model.fit(train_x, train_y)
predictions = model.predict(test_x)

accuracy = accuracy_score(test_y, predictions) * 100
print("Accuracy %.2f%%"% accuracy)

train_y.value_counts()

test_y.value_counts()

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 20

train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.25,
                                                        random_state=SEED,
                                                        stratify=y)
print("Train set lenght %d and test set lenght %d" % (len(train_x), len(test_x)))

model = LinearSVC()
model.fit(train_x, train_y)
predictions = model.predict(test_x)

accuracy = accuracy_score(test_y, predictions) * 100
print("Accuracy %.2f%%"% accuracy)

train_y.value_counts()

test_y.value_counts()

